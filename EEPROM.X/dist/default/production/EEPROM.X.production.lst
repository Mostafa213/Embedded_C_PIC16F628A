

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Apr 24 04:31:50 2023

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F628A Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   102                           PCLATH equ 0Ah ;# 
   103  000A                     # 312 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   104                           INTCON equ 0Bh ;# 
   105  000B                     # 390 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   106                           PIR1 equ 0Ch ;# 
   107  000C                     # 447 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   108                           TMR1 equ 0Eh ;# 
   109  000E                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   110                           TMR1L equ 0Eh ;# 
   111  000E                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   112                           TMR1H equ 0Fh ;# 
   113  000F                     # 468 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   114                           T1CON equ 010h ;# 
   115  0010                     # 527 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   116                           TMR2 equ 011h ;# 
   117  0011                     # 534 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   118                           T2CON equ 012h ;# 
   119  0012                     # 605 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   120                           CCPR1 equ 015h ;# 
   121  0015                     # 612 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   122                           CCPR1L equ 015h ;# 
   123  0015                     # 619 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   124                           CCPR1H equ 016h ;# 
   125  0016                     # 626 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   126                           CCP1CON equ 017h ;# 
   127  0017                     # 684 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   128                           RCSTA equ 018h ;# 
   129  0018                     # 755 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   130                           TXREG equ 019h ;# 
   131  0019                     # 762 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   132                           RCREG equ 01Ah ;# 
   133  001A                     # 769 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   134                           CMCON equ 01Fh ;# 
   135  001F                     # 839 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   136                           OPTION_REG equ 081h ;# 
   137  0081                     # 909 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   138                           TRISA equ 085h ;# 
   139  0085                     # 971 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   140                           TRISB equ 086h ;# 
   141  0086                     # 1033 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   142                           PIE1 equ 08Ch ;# 
   143  008C                     # 1090 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   144                           PCON equ 08Eh ;# 
   145  008E                     # 1139 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   146                           PR2 equ 092h ;# 
   147  0092                     # 1146 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   148                           TXSTA equ 098h ;# 
   149  0098                     # 1203 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   150                           SPBRG equ 099h ;# 
   151  0099                     # 1210 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   152                           EEDATA equ 09Ah ;# 
   153  009A                     # 1217 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   154                           EEADR equ 09Bh ;# 
   155  009B                     # 1224 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   156                           EECON1 equ 09Ch ;# 
   157  009C                     # 1262 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   158                           EECON2 equ 09Dh ;# 
   159  009D                     # 1269 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   160                           VRCON equ 09Fh ;# 
   161  009F                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   162                           INDF equ 00h ;# 
   163  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   164                           TMR0 equ 01h ;# 
   165  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   166                           PCL equ 02h ;# 
   167  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   168                           STATUS equ 03h ;# 
   169  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   170                           FSR equ 04h ;# 
   171  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   172                           PORTA equ 05h ;# 
   173  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   174                           PORTB equ 06h ;# 
   175  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   176                           PCLATH equ 0Ah ;# 
   177  000A                     # 312 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   178                           INTCON equ 0Bh ;# 
   179  000B                     # 390 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   180                           PIR1 equ 0Ch ;# 
   181  000C                     # 447 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   182                           TMR1 equ 0Eh ;# 
   183  000E                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   184                           TMR1L equ 0Eh ;# 
   185  000E                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   186                           TMR1H equ 0Fh ;# 
   187  000F                     # 468 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   188                           T1CON equ 010h ;# 
   189  0010                     # 527 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   190                           TMR2 equ 011h ;# 
   191  0011                     # 534 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   192                           T2CON equ 012h ;# 
   193  0012                     # 605 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   194                           CCPR1 equ 015h ;# 
   195  0015                     # 612 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   196                           CCPR1L equ 015h ;# 
   197  0015                     # 619 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   198                           CCPR1H equ 016h ;# 
   199  0016                     # 626 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   200                           CCP1CON equ 017h ;# 
   201  0017                     # 684 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   202                           RCSTA equ 018h ;# 
   203  0018                     # 755 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   204                           TXREG equ 019h ;# 
   205  0019                     # 762 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   206                           RCREG equ 01Ah ;# 
   207  001A                     # 769 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   208                           CMCON equ 01Fh ;# 
   209  001F                     # 839 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   210                           OPTION_REG equ 081h ;# 
   211  0081                     # 909 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   212                           TRISA equ 085h ;# 
   213  0085                     # 971 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   214                           TRISB equ 086h ;# 
   215  0086                     # 1033 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   216                           PIE1 equ 08Ch ;# 
   217  008C                     # 1090 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   218                           PCON equ 08Eh ;# 
   219  008E                     # 1139 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   220                           PR2 equ 092h ;# 
   221  0092                     # 1146 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   222                           TXSTA equ 098h ;# 
   223  0098                     # 1203 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   224                           SPBRG equ 099h ;# 
   225  0099                     # 1210 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   226                           EEDATA equ 09Ah ;# 
   227  009A                     # 1217 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   228                           EEADR equ 09Bh ;# 
   229  009B                     # 1224 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   230                           EECON1 equ 09Ch ;# 
   231  009C                     # 1262 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   232                           EECON2 equ 09Dh ;# 
   233  009D                     # 1269 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   234                           VRCON equ 09Fh ;# 
   235  009F                     	FNCALL	_main,_EEPROM_Read
   236                           	FNCALL	_main,_EEPROM_Write
   237                           	FNROOT	_main
   238                           	global	_INTCONbits
   239                           _INTCONbits	set	0xB
   240  000B                     	global	_PORTA
   241                           _PORTA	set	0x5
   242  0005                     	global	_RB0
   243                           _RB0	set	0x30
   244  0030                     	global	_RB3
   245                           _RB3	set	0x33
   246  0033                     	global	_RB2
   247                           _RB2	set	0x32
   248  0032                     	global	_RB1
   249                           _RB1	set	0x31
   250  0031                     	global	_EECON2
   251                           _EECON2	set	0x9D
   252  009D                     	global	_EEDATA
   253                           _EEDATA	set	0x9A
   254  009A                     	global	_EEADR
   255                           _EEADR	set	0x9B
   256  009B                     	global	_EECON1bits
   257                           _EECON1bits	set	0x9C
   258  009C                     	global	_TRISA
   259                           _TRISA	set	0x85
   260  0085                     	global	_TRISB
   261                           _TRISB	set	0x86
   262  0086                     ; #config settings
   263                           global __CFG_FOSC$INTOSCIO
   264                           __CFG_FOSC$INTOSCIO equ 0x0
   265  0000                     global __CFG_WDTE$OFF
   266                           __CFG_WDTE$OFF equ 0x0
   267  0000                     global __CFG_PWRTE$OFF
   268                           __CFG_PWRTE$OFF equ 0x0
   269  0000                     global __CFG_MCLRE$OFF
   270                           __CFG_MCLRE$OFF equ 0x0
   271  0000                     global __CFG_BOREN$OFF
   272                           __CFG_BOREN$OFF equ 0x0
   273  0000                     global __CFG_LVP$OFF
   274                           __CFG_LVP$OFF equ 0x0
   275  0000                     global __CFG_CPD$OFF
   276                           __CFG_CPD$OFF equ 0x0
   277  0000                     global __CFG_CP$OFF
   278                           __CFG_CP$OFF equ 0x0
   279  0000                     	file	"C:\Users\Mostafa\AppData\Local\Temp\s1jg."
   280                           	line	#
   281                           psect cinit,class=CODE,delta=2
   282                           global start_initialization
   283                           start_initialization:
   284  07FE                     
   285                           global __initialization
   286                           __initialization:
   287  07FE                     psect cinit,class=CODE,delta=2,merge=1
   288                           global end_of_initialization,__end_of__initialization
   289                           
   290                           ;End of C runtime variable initialization code
   291                           
   292                           end_of_initialization:
   293  07FE                     __end_of__initialization:
   294  07FE                     clrf status
   295  07FE  0183               ljmp _main	;jump to C main() function
   296  07FF  2F5D               psect	cstackCOMMON,class=COMMON,space=1,noexec
   297                           global __pcstackCOMMON
   298                           __pcstackCOMMON:
   299  0070                     ?_EEPROM_Write:	; 1 bytes @ 0x0
   300  0070                     ?_EEPROM_Read:	; 1 bytes @ 0x0
   301  0070                     ??_EEPROM_Read:	; 1 bytes @ 0x0
   302  0070                     ?_main:	; 1 bytes @ 0x0
   303  0070                     	global	EEPROM_Write@Data
   304                           EEPROM_Write@Data:	; 1 bytes @ 0x0
   305  0070                     	ds	1
   306  0070                     ??_EEPROM_Write:	; 1 bytes @ 0x1
   307  0071                     	global	EEPROM_Write@Address
   308                           EEPROM_Write@Address:	; 1 bytes @ 0x1
   309  0071                     	global	EEPROM_Read@Address
   310                           EEPROM_Read@Address:	; 1 bytes @ 0x1
   311  0071                     	ds	1
   312  0071                     	global	EEPROM_Read@Data
   313                           EEPROM_Read@Data:	; 1 bytes @ 0x2
   314  0072                     	ds	1
   315  0072                     ??_main:	; 1 bytes @ 0x3
   316  0073                     	ds	3
   317  0073                     	global	main@i
   318                           main@i:	; 1 bytes @ 0x6
   319  0076                     	ds	1
   320  0076                     	global	main@Address
   321                           main@Address:	; 1 bytes @ 0x7
   322  0077                     	ds	1
   323  0077                     ;!
   324                           ;!Data Sizes:
   325                           ;!    Strings     0
   326                           ;!    Constant    0
   327                           ;!    Data        0
   328                           ;!    BSS         0
   329                           ;!    Persistent  0
   330                           ;!    Stack       0
   331                           ;!
   332                           ;!Auto Spaces:
   333                           ;!    Space          Size  Autos    Used
   334                           ;!    COMMON           14      8       8
   335                           ;!    BANK0            80      0       0
   336                           ;!    BANK1            80      0       0
   337                           ;!    BANK2            48      0       0
   338                           
   339                           ;!
   340                           ;!Pointer List with Targets:
   341                           ;!
   342                           ;!    None.
   343                           
   344                           
   345                           ;!
   346                           ;!Critical Paths under _main in COMMON
   347                           ;!
   348                           ;!    _main->_EEPROM_Read
   349                           ;!
   350                           ;!Critical Paths under _main in BANK0
   351                           ;!
   352                           ;!    None.
   353                           ;!
   354                           ;!Critical Paths under _main in BANK1
   355                           ;!
   356                           ;!    None.
   357                           ;!
   358                           ;!Critical Paths under _main in BANK2
   359                           ;!
   360                           ;!    None.
   361                           
   362 ;;
   363 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   364 ;;
   365                           
   366                           ;!
   367                           ;!Call Graph Tables:
   368                           ;!
   369                           ;! ---------------------------------------------------------------------------------
   370                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   371                           ;! ---------------------------------------------------------------------------------
   372                           ;! (0) _main                                                 5     5      0     463
   373                           ;!                                              3 COMMON     5     5      0
   374                           ;!                        _EEPROM_Read
   375                           ;!                       _EEPROM_Write
   376                           ;! ---------------------------------------------------------------------------------
   377                           ;! (1) _EEPROM_Write                                         2     1      1     272
   378                           ;!                                              0 COMMON     2     1      1
   379                           ;! ---------------------------------------------------------------------------------
   380                           ;! (1) _EEPROM_Read                                          3     3      0      30
   381                           ;!                                              0 COMMON     3     3      0
   382                           ;! ---------------------------------------------------------------------------------
   383                           ;! Estimated maximum stack depth 1
   384                           ;! ---------------------------------------------------------------------------------
   385                           ;!
   386                           ;! Call Graph Graphs:
   387                           ;!
   388                           ;! _main (ROOT)
   389                           ;!   _EEPROM_Read
   390                           ;!   _EEPROM_Write
   391                           ;!
   392                           
   393                           ;! Address spaces:
   394                           
   395                           ;!Name               Size   Autos  Total    Cost      Usage
   396                           ;!BITCOMMON            E      0       0       0        0.0%
   397                           ;!EEDATA              80      0       0       0        0.0%
   398                           ;!NULL                 0      0       0       0        0.0%
   399                           ;!CODE                 0      0       0       0        0.0%
   400                           ;!COMMON               E      8       8       1       57.1%
   401                           ;!BITSFR0              0      0       0       1        0.0%
   402                           ;!SFR0                 0      0       0       1        0.0%
   403                           ;!BITSFR1              0      0       0       2        0.0%
   404                           ;!SFR1                 0      0       0       2        0.0%
   405                           ;!STACK                0      0       0       2        0.0%
   406                           ;!BANK0               50      0       0       3        0.0%
   407                           ;!BITSFR3              0      0       0       4        0.0%
   408                           ;!SFR3                 0      0       0       4        0.0%
   409                           ;!ABS                  0      0       0       4        0.0%
   410                           ;!BITBANK0            50      0       0       5        0.0%
   411                           ;!BITSFR2              0      0       0       5        0.0%
   412                           ;!SFR2                 0      0       0       5        0.0%
   413                           ;!BITBANK1            50      0       0       6        0.0%
   414                           ;!BANK1               50      0       0       7        0.0%
   415                           ;!BITBANK2            30      0       0       8        0.0%
   416                           ;!BANK2               30      0       0       9        0.0%
   417                           ;!DATA                 0      0       0      10        0.0%
   418                           
   419                           	global	_main
   420                           
   421 ;; *************** function _main *****************
   422 ;; Defined at:
   423 ;;		line 21 in file "main.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;		None
   426 ;; Auto vars:     Size  Location     Type
   427 ;;  i               1    6[COMMON] unsigned char 
   428 ;;  Address         1    7[COMMON] unsigned char 
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      void 
   431 ;; Registers used:
   432 ;;		wreg, status,2, status,0, pclath, cstack
   433 ;; Tracked objects:
   434 ;;		On entry : B00/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   438 ;;      Params:         0       0       0       0
   439 ;;      Locals:         2       0       0       0
   440 ;;      Temps:          3       0       0       0
   441 ;;      Totals:         5       0       0       0
   442 ;;Total ram usage:        5 bytes
   443 ;; Hardware stack levels required when called:    1
   444 ;; This function calls:
   445 ;;		_EEPROM_Read
   446 ;;		_EEPROM_Write
   447 ;; This function is called by:
   448 ;;		Startup code after reset
   449 ;; This function uses a non-reentrant model
   450 ;;
   451                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   452                           	file	"main.c"
   453                           	line	21
   454                           global __pmaintext
   455                           __pmaintext:	;psect for function _main
   456  075D                     psect	maintext
   457                           	file	"main.c"
   458                           	line	21
   459                           	global	__size_of_main
   460                           	__size_of_main	equ	__end_of_main-_main
   461  00A1                     	
   462                           _main:	
   463  075D                     ;incstack = 0
   464                           	opt	stack 7
   465                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   466                           	line	22
   467                           	
   468                           l715:	
   469  075D                     ;main.c: 22:     TRISB|=0b00001111;
   470                           	movlw	low(0Fh)
   471  075D  300F               	movwf	(??_main+0)+0
   472  075E  00F3               	movf	(??_main+0)+0,w
   473  075F  0873               	bsf	status, 5	;RP0=1, select bank1
   474  0760  1683               	bcf	status, 6	;RP1=0, select bank1
   475  0761  1303               	iorwf	(134)^080h,f	;volatile
   476  0762  0486               	line	23
   477                           ;main.c: 23:     TRISA&=0b11110000;
   478                           	movlw	low(0F0h)
   479  0763  30F0               	movwf	(??_main+0)+0
   480  0764  00F3               	movf	(??_main+0)+0,w
   481  0765  0873               	andwf	(133)^080h,f	;volatile
   482  0766  0585               	line	24
   483                           	
   484                           l717:	
   485  0767                     ;main.c: 24:     PORTA=0x00;
   486                           	bcf	status, 5	;RP0=0, select bank0
   487  0767  1283               	bcf	status, 6	;RP1=0, select bank0
   488  0768  1303               	clrf	(5)	;volatile
   489  0769  0185               	line	25
   490                           	
   491                           l719:	
   492  076A                     ;main.c: 25:     uint8_t Address=0;
   493                           	clrf	(main@Address)
   494  076A  01F7               	goto	l721
   495  076B  2F6C               	line	26
   496                           ;main.c: 26:     while(1){
   497                           	
   498                           l35:	
   499  076C                     	line	27
   500                           	
   501                           l721:	
   502  076C                     ;main.c: 27:         if(RB1)
   503                           	bcf	status, 5	;RP0=0, select bank0
   504  076C  1283               	bcf	status, 6	;RP1=0, select bank0
   505  076D  1303               	btfss	(49/8),(49)&7	;volatile
   506  076E  1C86               	goto	u101
   507  076F  2F71               	goto	u100
   508  0770  2F72               u101:
   509  0771                     	goto	l729
   510  0771  2F8A               u100:
   511  0772                     	line	29
   512                           	
   513                           l723:	
   514  0772                     ;main.c: 28:         {;main.c: 29:             EEPROM_Write(Address++, 3);
   515                           	movlw	low(03h)
   516  0772  3003               	movwf	(??_main+0)+0
   517  0773  00F3               	movf	(??_main+0)+0,w
   518  0774  0873               	movwf	(EEPROM_Write@Data)
   519  0775  00F0               	movf	(main@Address),w
   520  0776  0877               	fcall	_EEPROM_Write
   521  0777  2745               	
   522                           l725:	
   523  0778                     	movlw	low(01h)
   524  0778  3001               	movwf	(??_main+0)+0
   525  0779  00F3               	movf	(??_main+0)+0,w
   526  077A  0873               	addwf	(main@Address),f
   527  077B  07F7               	line	30
   528                           	
   529                           l727:	
   530  077C                     ;main.c: 30:             _delay((unsigned long)((500)*(4000000/4000.0)));
   531                           	opt asmopt_push
   532                           opt asmopt_off
   533                           movlw  3
   534  077C  3003               movwf	((??_main+0)+0+2),f
   535  077D  00F5               movlw	138
   536  077E  308A               movwf	((??_main+0)+0+1),f
   537  077F  00F4               	movlw	85
   538  0780  3055               movwf	((??_main+0)+0),f
   539  0781  00F3               	u177:
   540  0782                     decfsz	((??_main+0)+0),f
   541  0782  0BF3               	goto	u177
   542  0783  2F82               	decfsz	((??_main+0)+0+1),f
   543  0784  0BF4               	goto	u177
   544  0785  2F82               	decfsz	((??_main+0)+0+2),f
   545  0786  0BF5               	goto	u177
   546  0787  2F82               	nop2
   547  0788  2F89               opt asmopt_pop
   548                           
   549                           	goto	l729
   550  0789  2F8A               	line	31
   551                           ;main.c: 31:         }
   552                           	
   553                           l36:	
   554  078A                     	line	32
   555                           	
   556                           l729:	
   557  078A                     ;main.c: 32:         if(RB2)
   558                           	bcf	status, 5	;RP0=0, select bank0
   559  078A  1283               	bcf	status, 6	;RP1=0, select bank0
   560  078B  1303               	btfss	(50/8),(50)&7	;volatile
   561  078C  1D06               	goto	u111
   562  078D  2F8F               	goto	u110
   563  078E  2F90               u111:
   564  078F                     	goto	l737
   565  078F  2FA8               u110:
   566  0790                     	line	34
   567                           	
   568                           l731:	
   569  0790                     ;main.c: 33:         {;main.c: 34:             EEPROM_Write(Address++, 5);
   570                           	movlw	low(05h)
   571  0790  3005               	movwf	(??_main+0)+0
   572  0791  00F3               	movf	(??_main+0)+0,w
   573  0792  0873               	movwf	(EEPROM_Write@Data)
   574  0793  00F0               	movf	(main@Address),w
   575  0794  0877               	fcall	_EEPROM_Write
   576  0795  2745               	
   577                           l733:	
   578  0796                     	movlw	low(01h)
   579  0796  3001               	movwf	(??_main+0)+0
   580  0797  00F3               	movf	(??_main+0)+0,w
   581  0798  0873               	addwf	(main@Address),f
   582  0799  07F7               	line	35
   583                           	
   584                           l735:	
   585  079A                     ;main.c: 35:             _delay((unsigned long)((500)*(4000000/4000.0)));
   586                           	opt asmopt_push
   587                           opt asmopt_off
   588                           movlw  3
   589  079A  3003               movwf	((??_main+0)+0+2),f
   590  079B  00F5               movlw	138
   591  079C  308A               movwf	((??_main+0)+0+1),f
   592  079D  00F4               	movlw	85
   593  079E  3055               movwf	((??_main+0)+0),f
   594  079F  00F3               	u187:
   595  07A0                     decfsz	((??_main+0)+0),f
   596  07A0  0BF3               	goto	u187
   597  07A1  2FA0               	decfsz	((??_main+0)+0+1),f
   598  07A2  0BF4               	goto	u187
   599  07A3  2FA0               	decfsz	((??_main+0)+0+2),f
   600  07A4  0BF5               	goto	u187
   601  07A5  2FA0               	nop2
   602  07A6  2FA7               opt asmopt_pop
   603                           
   604                           	goto	l737
   605  07A7  2FA8               	line	36
   606                           ;main.c: 36:         }
   607                           	
   608                           l37:	
   609  07A8                     	line	37
   610                           	
   611                           l737:	
   612  07A8                     ;main.c: 37:         if(RB3)
   613                           	bcf	status, 5	;RP0=0, select bank0
   614  07A8  1283               	bcf	status, 6	;RP1=0, select bank0
   615  07A9  1303               	btfss	(51/8),(51)&7	;volatile
   616  07AA  1D86               	goto	u121
   617  07AB  2FAD               	goto	u120
   618  07AC  2FAE               u121:
   619  07AD                     	goto	l745
   620  07AD  2FC6               u120:
   621  07AE                     	line	39
   622                           	
   623                           l739:	
   624  07AE                     ;main.c: 38:         {;main.c: 39:             EEPROM_Write(Address++, 7);
   625                           	movlw	low(07h)
   626  07AE  3007               	movwf	(??_main+0)+0
   627  07AF  00F3               	movf	(??_main+0)+0,w
   628  07B0  0873               	movwf	(EEPROM_Write@Data)
   629  07B1  00F0               	movf	(main@Address),w
   630  07B2  0877               	fcall	_EEPROM_Write
   631  07B3  2745               	
   632                           l741:	
   633  07B4                     	movlw	low(01h)
   634  07B4  3001               	movwf	(??_main+0)+0
   635  07B5  00F3               	movf	(??_main+0)+0,w
   636  07B6  0873               	addwf	(main@Address),f
   637  07B7  07F7               	line	40
   638                           	
   639                           l743:	
   640  07B8                     ;main.c: 40:             _delay((unsigned long)((500)*(4000000/4000.0)));
   641                           	opt asmopt_push
   642                           opt asmopt_off
   643                           movlw  3
   644  07B8  3003               movwf	((??_main+0)+0+2),f
   645  07B9  00F5               movlw	138
   646  07BA  308A               movwf	((??_main+0)+0+1),f
   647  07BB  00F4               	movlw	85
   648  07BC  3055               movwf	((??_main+0)+0),f
   649  07BD  00F3               	u197:
   650  07BE                     decfsz	((??_main+0)+0),f
   651  07BE  0BF3               	goto	u197
   652  07BF  2FBE               	decfsz	((??_main+0)+0+1),f
   653  07C0  0BF4               	goto	u197
   654  07C1  2FBE               	decfsz	((??_main+0)+0+2),f
   655  07C2  0BF5               	goto	u197
   656  07C3  2FBE               	nop2
   657  07C4  2FC5               opt asmopt_pop
   658                           
   659                           	goto	l745
   660  07C5  2FC6               	line	41
   661                           ;main.c: 41:         }
   662                           	
   663                           l38:	
   664  07C6                     	line	42
   665                           	
   666                           l745:	
   667  07C6                     ;main.c: 42:         if(Address == 3)
   668                           		movlw	3
   669  07C6  3003               	xorwf	((main@Address)),w
   670  07C7  0677               	btfss	status,2
   671  07C8  1D03               	goto	u131
   672  07C9  2FCB               	goto	u130
   673  07CA  2FCC               u131:
   674  07CB                     	goto	l749
   675  07CB  2FCE               u130:
   676  07CC                     	line	43
   677                           	
   678                           l747:	
   679  07CC                     ;main.c: 43:             Address = 0;
   680                           	clrf	(main@Address)
   681  07CC  01F7               	goto	l749
   682  07CD  2FCE               	
   683                           l39:	
   684  07CE                     	line	44
   685                           	
   686                           l749:	
   687  07CE                     ;main.c: 44:         if(RB0)
   688                           	bcf	status, 5	;RP0=0, select bank0
   689  07CE  1283               	bcf	status, 6	;RP1=0, select bank0
   690  07CF  1303               	btfss	(48/8),(48)&7	;volatile
   691  07D0  1C06               	goto	u141
   692  07D1  2FD3               	goto	u140
   693  07D2  2FD4               u141:
   694  07D3                     	goto	l721
   695  07D3  2F6C               u140:
   696  07D4                     	line	47
   697                           	
   698                           l751:	
   699  07D4                     ;main.c: 45:         {;main.c: 47:         for (uint8_t i=0; i<3; i++)
   700                           	clrf	(main@i)
   701  07D4  01F6               	
   702                           l753:	
   703  07D5                     	movlw	low(03h)
   704  07D5  3003               	subwf	(main@i),w
   705  07D6  0276               	skipc
   706  07D7  1C03               	goto	u151
   707  07D8  2FDA               	goto	u150
   708  07D9  2FDB               u151:
   709  07DA                     	goto	l757
   710  07DA  2FDD               u150:
   711  07DB                     	goto	l721
   712  07DB  2F6C               	
   713                           l755:	
   714  07DC                     	goto	l721
   715  07DC  2F6C               	
   716                           l41:	
   717  07DD                     	line	49
   718                           	
   719                           l757:	
   720  07DD                     ;main.c: 48:         {;main.c: 49:             PORTA = EEPROM_Read(i);
   721                           	movf	(main@i),w
   722  07DD  0876               	fcall	_EEPROM_Read
   723  07DE  2738               	bcf	status, 5	;RP0=0, select bank0
   724  07DF  1283               	bcf	status, 6	;RP1=0, select bank0
   725  07E0  1303               	movwf	(5)	;volatile
   726  07E1  0085               	line	50
   727                           	
   728                           l759:	
   729  07E2                     ;main.c: 50:             _delay((unsigned long)((1000)*(4000000/4000.0)));
   730                           	opt asmopt_push
   731                           opt asmopt_off
   732                           movlw  6
   733  07E2  3006               movwf	((??_main+0)+0+2),f
   734  07E3  00F5               movlw	19
   735  07E4  3013               movwf	((??_main+0)+0+1),f
   736  07E5  00F4               	movlw	173
   737  07E6  30AD               movwf	((??_main+0)+0),f
   738  07E7  00F3               	u207:
   739  07E8                     decfsz	((??_main+0)+0),f
   740  07E8  0BF3               	goto	u207
   741  07E9  2FE8               	decfsz	((??_main+0)+0+1),f
   742  07EA  0BF4               	goto	u207
   743  07EB  2FE8               	decfsz	((??_main+0)+0+2),f
   744  07EC  0BF5               	goto	u207
   745  07ED  2FE8               	nop2
   746  07EE  2FEF               opt asmopt_pop
   747                           
   748                           	line	51
   749                           	
   750                           l761:	
   751  07EF                     ;main.c: 51:          }
   752                           	movlw	low(01h)
   753  07EF  3001               	movwf	(??_main+0)+0
   754  07F0  00F3               	movf	(??_main+0)+0,w
   755  07F1  0873               	addwf	(main@i),f
   756  07F2  07F6               	
   757                           l763:	
   758  07F3                     	movlw	low(03h)
   759  07F3  3003               	subwf	(main@i),w
   760  07F4  0276               	skipc
   761  07F5  1C03               	goto	u161
   762  07F6  2FF8               	goto	u160
   763  07F7  2FF9               u161:
   764  07F8                     	goto	l757
   765  07F8  2FDD               u160:
   766  07F9                     	goto	l721
   767  07F9  2F6C               	
   768                           l42:	
   769  07FA                     	goto	l721
   770  07FA  2F6C               	line	52
   771                           ;main.c: 52:         }
   772                           	
   773                           l40:	
   774  07FB                     	goto	l721
   775  07FB  2F6C               	line	53
   776                           ;main.c: 53:     }
   777                           	
   778                           l43:	
   779  07FC                     	goto	l721
   780  07FC  2F6C               	
   781                           l44:	
   782  07FD                     	line	55
   783                           ;main.c: 54:     return;
   784                           	
   785                           l45:	
   786  07FD                     	global	start
   787                           	ljmp	start
   788  07FD  2800               	opt stack 0
   789                           GLOBAL	__end_of_main
   790                           	__end_of_main:
   791  07FE                     	signat	_main,89
   792                           	global	_EEPROM_Write
   793                           
   794 ;; *************** function _EEPROM_Write *****************
   795 ;; Defined at:
   796 ;;		line 59 in file "main.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;  Address         1    wreg     unsigned char 
   799 ;;  Data            1    0[COMMON] unsigned char 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;  Address         1    1[COMMON] unsigned char 
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		wreg
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   811 ;;      Params:         1       0       0       0
   812 ;;      Locals:         1       0       0       0
   813 ;;      Temps:          0       0       0       0
   814 ;;      Totals:         2       0       0       0
   815 ;;Total ram usage:        2 bytes
   816 ;; Hardware stack levels used:    1
   817 ;; This function calls:
   818 ;;		Nothing
   819 ;; This function is called by:
   820 ;;		_main
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
   824                           	line	59
   825                           global __ptext1
   826                           __ptext1:	;psect for function _EEPROM_Write
   827  0745                     psect	text1
   828                           	file	"main.c"
   829                           	line	59
   830                           	global	__size_of_EEPROM_Write
   831                           	__size_of_EEPROM_Write	equ	__end_of_EEPROM_Write-_EEPROM_Write
   832  0018                     	
   833                           _EEPROM_Write:	
   834  0745                     ;incstack = 0
   835                           	opt	stack 7
   836                           ; Regs used in _EEPROM_Write: [wreg]
   837                           ;EEPROM_Write@Address stored from wreg
   838                           	movwf	(EEPROM_Write@Address)
   839  0745  00F1               	line	60
   840                           	
   841                           l699:	
   842  0746                     ;main.c: 60:     while(EECON1bits.WR);
   843                           	goto	l48
   844  0746  2F47               	
   845                           l49:	
   846  0747                     	
   847                           l48:	
   848  0747                     	bsf	status, 5	;RP0=1, select bank1
   849  0747  1683               	bcf	status, 6	;RP1=0, select bank1
   850  0748  1303               	btfsc	(156)^080h,1	;volsfr
   851  0749  189C               	goto	u91
   852  074A  2F4C               	goto	u90
   853  074B  2F4D               u91:
   854  074C                     	goto	l48
   855  074C  2F47               u90:
   856  074D                     	goto	l701
   857  074D  2F4E               	
   858                           l50:	
   859  074E                     	line	61
   860                           	
   861                           l701:	
   862  074E                     ;main.c: 61:     EEADR = Address;
   863                           	movf	(EEPROM_Write@Address),w
   864  074E  0871               	movwf	(155)^080h	;volatile
   865  074F  009B               	line	62
   866                           ;main.c: 62:     EEDATA = Data;
   867                           	movf	(EEPROM_Write@Data),w
   868  0750  0870               	movwf	(154)^080h	;volatile
   869  0751  009A               	line	64
   870                           	
   871                           l703:	
   872  0752                     ;main.c: 64:     EECON1bits.WREN = 1;
   873                           	bsf	(156)^080h,2	;volsfr
   874  0752  151C               	line	65
   875                           	
   876                           l705:	
   877  0753                     ;main.c: 65:     INTCONbits.GIE = 0;
   878                           	bcf	(11),7	;volatile
   879  0753  138B               	line	66
   880                           ;main.c: 66:     EECON2 = 0x55;
   881                           	movlw	low(055h)
   882  0754  3055               	movwf	(157)^080h	;volsfr
   883  0755  009D               	line	67
   884                           ;main.c: 67:     EECON2 = 0xAA;
   885                           	movlw	low(0AAh)
   886  0756  30AA               	movwf	(157)^080h	;volsfr
   887  0757  009D               	line	68
   888                           	
   889                           l707:	
   890  0758                     ;main.c: 68:     EECON1bits.WR = 1;
   891                           	bsf	(156)^080h,1	;volsfr
   892  0758  149C               	line	69
   893                           	
   894                           l709:	
   895  0759                     ;main.c: 69:     INTCONbits.GIE = 1;
   896                           	bsf	(11),7	;volatile
   897  0759  178B               	line	70
   898                           	
   899                           l711:	
   900  075A                     ;main.c: 70:     EECON1bits.WREN = 0;
   901                           	bcf	(156)^080h,2	;volsfr
   902  075A  111C               	line	71
   903                           	
   904                           l713:	
   905  075B                     ;main.c: 71:     EECON1bits.WR = 0;
   906                           	bcf	(156)^080h,1	;volsfr
   907  075B  109C               	line	72
   908                           	
   909                           l51:	
   910  075C                     	return
   911  075C  0008               	opt stack 0
   912                           GLOBAL	__end_of_EEPROM_Write
   913                           	__end_of_EEPROM_Write:
   914  075D                     	signat	_EEPROM_Write,8313
   915                           	global	_EEPROM_Read
   916                           
   917 ;; *************** function _EEPROM_Read *****************
   918 ;; Defined at:
   919 ;;		line 80 in file "main.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;  Address         1    wreg     unsigned char 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  Address         1    1[COMMON] unsigned char 
   924 ;;  Data            1    2[COMMON] unsigned char 
   925 ;; Return value:  Size  Location     Type
   926 ;;                  1    wreg      unsigned char 
   927 ;; Registers used:
   928 ;;		wreg
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   934 ;;      Params:         0       0       0       0
   935 ;;      Locals:         2       0       0       0
   936 ;;      Temps:          1       0       0       0
   937 ;;      Totals:         3       0       0       0
   938 ;;Total ram usage:        3 bytes
   939 ;; Hardware stack levels used:    1
   940 ;; This function calls:
   941 ;;		Nothing
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           psect	text2,local,class=CODE,delta=2,merge=1,group=0
   947                           	line	80
   948                           global __ptext2
   949                           __ptext2:	;psect for function _EEPROM_Read
   950  0738                     psect	text2
   951                           	file	"main.c"
   952                           	line	80
   953                           	global	__size_of_EEPROM_Read
   954                           	__size_of_EEPROM_Read	equ	__end_of_EEPROM_Read-_EEPROM_Read
   955  000D                     	
   956                           _EEPROM_Read:	
   957  0738                     ;incstack = 0
   958                           	opt	stack 7
   959                           ; Regs used in _EEPROM_Read: [wreg]
   960                           ;EEPROM_Read@Address stored from wreg
   961                           	movwf	(EEPROM_Read@Address)
   962  0738  00F1               	line	82
   963                           	
   964                           l643:	
   965  0739                     ;main.c: 81:     uint8_t Data;;main.c: 82:     EEADR = Address;
   966                           	movf	(EEPROM_Read@Address),w
   967  0739  0871               	bsf	status, 5	;RP0=1, select bank1
   968  073A  1683               	bcf	status, 6	;RP1=0, select bank1
   969  073B  1303               	movwf	(155)^080h	;volatile
   970  073C  009B               	line	84
   971                           	
   972                           l645:	
   973  073D                     ;main.c: 84:     EECON1bits.RD = 1;
   974                           	bsf	(156)^080h,0	;volsfr
   975  073D  141C               	line	85
   976                           ;main.c: 85:     Data = EEDATA;
   977                           	movf	(154)^080h,w	;volatile
   978  073E  081A               	movwf	(??_EEPROM_Read+0)+0
   979  073F  00F0               	movf	(??_EEPROM_Read+0)+0,w
   980  0740  0870               	movwf	(EEPROM_Read@Data)
   981  0741  00F2               	line	86
   982                           ;main.c: 86:     return Data;
   983                           	movf	(EEPROM_Read@Data),w
   984  0742  0872               	goto	l54
   985  0743  2F44               	
   986                           l647:	
   987  0744                     	line	88
   988                           	
   989                           l54:	
   990  0744                     	return
   991  0744  0008               	opt stack 0
   992                           GLOBAL	__end_of_EEPROM_Read
   993                           	__end_of_EEPROM_Read:
   994  0745                     	signat	_EEPROM_Read,4217
   995                           global	___latbits
   996                           ___latbits	equ	0
   997  0000                     	global	btemp
   998                           	btemp set 07Eh
   999  007E                     
  1000                           	DABS	1,126,2	;btemp
  1001                           	global	wtemp0
  1002                           	wtemp0 set btemp+0
  1003  007E                     	end


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_EEPROM_Read

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     463
                                              3 COMMON     5     5      0
                        _EEPROM_Read
                       _EEPROM_Write
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         2     1      1     272
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_Read
   _EEPROM_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Apr 24 04:31:50 2023

            __CFG_CP$OFF 0000                       l40 07FB                       l41 07DD  
                     l50 074E                       l42 07FA                       l51 075C  
                     l43 07FC                       l35 076C                       l44 07FD  
                     l36 078A                       l45 07FD                       l37 07A8  
                     l54 0744                       l38 07C6                       l39 07CE  
                     l48 0747                       l49 0747                       u90 074D  
                     u91 074C                      l701 074E                      l711 075A  
                    l703 0752                      l713 075B                      l705 0753  
                    l721 076C                      l643 0739                      l707 0758  
                    l731 0790                      l723 0772                      l715 075D  
                    l645 073D                      l709 0759                      l741 07B4  
                    l733 0796                      l725 0778                      l717 0767  
                    l647 0744                      l751 07D4                      l743 07B8  
                    l735 079A                      l727 077C                      l719 076A  
                    l761 07EF                      l753 07D5                      l745 07C6  
                    l737 07A8                      l729 078A                      l763 07F3  
                    l755 07DC                      l747 07CC                      l739 07AE  
                    l757 07DD                      l749 07CE                      l759 07E2  
                    l699 0746                      _RB0 0030                      _RB1 0031  
                    _RB2 0032                      _RB3 0033                      u100 0772  
                    u101 0771                      u110 0790                      u111 078F  
                    u120 07AE                      u121 07AD                      u130 07CC  
                    u131 07CB                      u140 07D4                      u141 07D3  
                    u150 07DB                      u207 07E8                      u151 07DA  
                    u160 07F9                      u161 07F8                      u177 0782  
           __CFG_CPD$OFF 0000                      u187 07A0                      u197 07BE  
           __CFG_LVP$OFF 0000                     _main 075D                     btemp 007E  
                   start 0000     __end_of_EEPROM_Write 075D                    ?_main 0070  
                  _EEADR 009B            __CFG_WDTE$OFF 0000                    _PORTA 0005  
                  _TRISA 0085                    _TRISB 0086                    main@i 0076  
         __CFG_BOREN$OFF 0000                    status 0003                    wtemp0 007E  
       EEPROM_Write@Data 0070     __size_of_EEPROM_Read 000D           __CFG_MCLRE$OFF 0000  
        __initialization 07FE             __end_of_main 07FE                   ??_main 0073  
                 _EEDATA 009A                   _EECON2 009D           __CFG_PWRTE$OFF 0000  
__end_of__initialization 07FE    __size_of_EEPROM_Write 0018           __pcstackCOMMON 0070  
           _EEPROM_Write 0745               __pmaintext 075D                  __ptext1 0745  
                __ptext2 0738     end_of_initialization 07FE            ??_EEPROM_Read 0070  
    __end_of_EEPROM_Read 0745      start_initialization 07FE                ___latbits 0000  
            _EEPROM_Read 0738               _EECON1bits 009C            ?_EEPROM_Write 0070  
          __size_of_main 00A1               _INTCONbits 000B       EEPROM_Read@Address 0071  
         ??_EEPROM_Write 0071             ?_EEPROM_Read 0070      EEPROM_Write@Address 0071  
     __CFG_FOSC$INTOSCIO 0000          EEPROM_Read@Data 0072              main@Address 0077  
