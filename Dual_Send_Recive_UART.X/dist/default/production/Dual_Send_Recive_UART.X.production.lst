

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Apr 25 05:58:31 2023

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F628A Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   102                           PCLATH equ 0Ah ;# 
   103  000A                     # 312 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   104                           INTCON equ 0Bh ;# 
   105  000B                     # 390 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   106                           PIR1 equ 0Ch ;# 
   107  000C                     # 447 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   108                           TMR1 equ 0Eh ;# 
   109  000E                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   110                           TMR1L equ 0Eh ;# 
   111  000E                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   112                           TMR1H equ 0Fh ;# 
   113  000F                     # 468 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   114                           T1CON equ 010h ;# 
   115  0010                     # 527 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   116                           TMR2 equ 011h ;# 
   117  0011                     # 534 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   118                           T2CON equ 012h ;# 
   119  0012                     # 605 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   120                           CCPR1 equ 015h ;# 
   121  0015                     # 612 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   122                           CCPR1L equ 015h ;# 
   123  0015                     # 619 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   124                           CCPR1H equ 016h ;# 
   125  0016                     # 626 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   126                           CCP1CON equ 017h ;# 
   127  0017                     # 684 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   128                           RCSTA equ 018h ;# 
   129  0018                     # 755 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   130                           TXREG equ 019h ;# 
   131  0019                     # 762 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   132                           RCREG equ 01Ah ;# 
   133  001A                     # 769 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   134                           CMCON equ 01Fh ;# 
   135  001F                     # 839 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   136                           OPTION_REG equ 081h ;# 
   137  0081                     # 909 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   138                           TRISA equ 085h ;# 
   139  0085                     # 971 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   140                           TRISB equ 086h ;# 
   141  0086                     # 1033 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   142                           PIE1 equ 08Ch ;# 
   143  008C                     # 1090 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   144                           PCON equ 08Eh ;# 
   145  008E                     # 1139 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   146                           PR2 equ 092h ;# 
   147  0092                     # 1146 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   148                           TXSTA equ 098h ;# 
   149  0098                     # 1203 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   150                           SPBRG equ 099h ;# 
   151  0099                     # 1210 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   152                           EEDATA equ 09Ah ;# 
   153  009A                     # 1217 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   154                           EEADR equ 09Bh ;# 
   155  009B                     # 1224 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   156                           EECON1 equ 09Ch ;# 
   157  009C                     # 1262 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   158                           EECON2 equ 09Dh ;# 
   159  009D                     # 1269 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   160                           VRCON equ 09Fh ;# 
   161  009F                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   162                           INDF equ 00h ;# 
   163  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   164                           TMR0 equ 01h ;# 
   165  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   166                           PCL equ 02h ;# 
   167  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   168                           STATUS equ 03h ;# 
   169  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   170                           FSR equ 04h ;# 
   171  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   172                           PORTA equ 05h ;# 
   173  0005                     # 230 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   174                           PORTB equ 06h ;# 
   175  0006                     # 292 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   176                           PCLATH equ 0Ah ;# 
   177  000A                     # 312 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   178                           INTCON equ 0Bh ;# 
   179  000B                     # 390 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   180                           PIR1 equ 0Ch ;# 
   181  000C                     # 447 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   182                           TMR1 equ 0Eh ;# 
   183  000E                     # 454 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   184                           TMR1L equ 0Eh ;# 
   185  000E                     # 461 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   186                           TMR1H equ 0Fh ;# 
   187  000F                     # 468 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   188                           T1CON equ 010h ;# 
   189  0010                     # 527 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   190                           TMR2 equ 011h ;# 
   191  0011                     # 534 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   192                           T2CON equ 012h ;# 
   193  0012                     # 605 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   194                           CCPR1 equ 015h ;# 
   195  0015                     # 612 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   196                           CCPR1L equ 015h ;# 
   197  0015                     # 619 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   198                           CCPR1H equ 016h ;# 
   199  0016                     # 626 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   200                           CCP1CON equ 017h ;# 
   201  0017                     # 684 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   202                           RCSTA equ 018h ;# 
   203  0018                     # 755 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   204                           TXREG equ 019h ;# 
   205  0019                     # 762 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   206                           RCREG equ 01Ah ;# 
   207  001A                     # 769 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   208                           CMCON equ 01Fh ;# 
   209  001F                     # 839 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   210                           OPTION_REG equ 081h ;# 
   211  0081                     # 909 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   212                           TRISA equ 085h ;# 
   213  0085                     # 971 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   214                           TRISB equ 086h ;# 
   215  0086                     # 1033 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   216                           PIE1 equ 08Ch ;# 
   217  008C                     # 1090 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   218                           PCON equ 08Eh ;# 
   219  008E                     # 1139 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   220                           PR2 equ 092h ;# 
   221  0092                     # 1146 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   222                           TXSTA equ 098h ;# 
   223  0098                     # 1203 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   224                           SPBRG equ 099h ;# 
   225  0099                     # 1210 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   226                           EEDATA equ 09Ah ;# 
   227  009A                     # 1217 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   228                           EEADR equ 09Bh ;# 
   229  009B                     # 1224 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   230                           EECON1 equ 09Ch ;# 
   231  009C                     # 1262 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   232                           EECON2 equ 09Dh ;# 
   233  009D                     # 1269 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f628a.h"
   234                           VRCON equ 09Fh ;# 
   235  009F                     	FNCALL	_main,_TX_RX_Init
   236                           	FNCALL	_main,_UART_Write
   237                           	FNROOT	_main
   238                           	FNCALL	intlevel1,_ISR
   239                           	global	intlevel1
   240                           	FNROOT	intlevel1
   241                           	global	_Data
   242                           	global	_TXREG
   243                           _TXREG	set	0x19
   244  0019                     	global	_RCREG
   245                           _RCREG	set	0x1A
   246  001A                     	global	_PORTA
   247                           _PORTA	set	0x5
   248  0005                     	global	_CREN
   249                           _CREN	set	0xC4
   250  00C4                     	global	_GIE
   251                           _GIE	set	0x5F
   252  005F                     	global	_PEIE
   253                           _PEIE	set	0x5E
   254  005E                     	global	_SPEN
   255                           _SPEN	set	0xC7
   256  00C7                     	global	_RCIF
   257                           _RCIF	set	0x65
   258  0065                     	global	_RB4
   259                           _RB4	set	0x34
   260  0034                     	global	_RB3
   261                           _RB3	set	0x33
   262  0033                     	global	_RB0
   263                           _RB0	set	0x30
   264  0030                     	global	_SPBRG
   265                           _SPBRG	set	0x99
   266  0099                     	global	_TRISB
   267                           _TRISB	set	0x86
   268  0086                     	global	_TRISA
   269                           _TRISA	set	0x85
   270  0085                     	global	_TRMT
   271                           _TRMT	set	0x4C1
   272  04C1                     	global	_RCIE
   273                           _RCIE	set	0x465
   274  0465                     	global	_TXEN
   275                           _TXEN	set	0x4C5
   276  04C5                     	global	_TRISB2
   277                           _TRISB2	set	0x432
   278  0432                     	global	_TRISB1
   279                           _TRISB1	set	0x431
   280  0431                     	global	_SYNC
   281                           _SYNC	set	0x4C4
   282  04C4                     	global	_BRGH
   283                           _BRGH	set	0x4C2
   284  04C2                     ; #config settings
   285                           global __CFG_FOSC$INTOSCIO
   286                           __CFG_FOSC$INTOSCIO equ 0x0
   287  0000                     global __CFG_WDTE$OFF
   288                           __CFG_WDTE$OFF equ 0x0
   289  0000                     global __CFG_PWRTE$OFF
   290                           __CFG_PWRTE$OFF equ 0x0
   291  0000                     global __CFG_MCLRE$OFF
   292                           __CFG_MCLRE$OFF equ 0x0
   293  0000                     global __CFG_BOREN$OFF
   294                           __CFG_BOREN$OFF equ 0x0
   295  0000                     global __CFG_LVP$OFF
   296                           __CFG_LVP$OFF equ 0x0
   297  0000                     global __CFG_CPD$OFF
   298                           __CFG_CPD$OFF equ 0x0
   299  0000                     global __CFG_CP$OFF
   300                           __CFG_CP$OFF equ 0x0
   301  0000                     	file	"C:\Users\Mostafa\AppData\Local\Temp\s434."
   302                           	line	#
   303                           psect cinit,class=CODE,delta=2
   304                           global start_initialization
   305                           start_initialization:
   306  000B                     
   307                           global __initialization
   308                           __initialization:
   309  000B                     psect	bssCOMMON,class=COMMON,space=1,noexec
   310                           global __pbssCOMMON
   311                           __pbssCOMMON:
   312  0077                     _Data:
   313  0077                            ds      1
   314  0077                     
   315                           	file	"C:\Users\Mostafa\AppData\Local\Temp\s434."
   316                           	line	#
   317                           ; Clear objects allocated to COMMON
   318                           psect cinit,class=CODE,delta=2,merge=1
   319                           	clrf	((__pbssCOMMON)+0)&07Fh
   320  000B  01F7               psect cinit,class=CODE,delta=2,merge=1
   321                           global end_of_initialization,__end_of__initialization
   322                           
   323                           ;End of C runtime variable initialization code
   324                           
   325                           end_of_initialization:
   326  000C                     __end_of__initialization:
   327  000C                     clrf status
   328  000C  0183               ljmp _main	;jump to C main() function
   329  000D  280E               psect	cstackCOMMON,class=COMMON,space=1,noexec
   330                           global __pcstackCOMMON
   331                           __pcstackCOMMON:
   332  0070                     ?_TX_RX_Init:	; 1 bytes @ 0x0
   333  0070                     ?_UART_Write:	; 1 bytes @ 0x0
   334  0070                     ?_main:	; 1 bytes @ 0x0
   335  0070                     ?_ISR:	; 1 bytes @ 0x0
   336  0070                     ??_ISR:	; 1 bytes @ 0x0
   337  0070                     	ds	3
   338  0070                     ??_TX_RX_Init:	; 1 bytes @ 0x3
   339  0073                     ??_UART_Write:	; 1 bytes @ 0x3
   340  0073                     	global	UART_Write@data
   341                           UART_Write@data:	; 1 bytes @ 0x3
   342  0073                     	ds	1
   343  0073                     ??_main:	; 1 bytes @ 0x4
   344  0074                     	ds	3
   345  0074                     ;!
   346                           ;!Data Sizes:
   347                           ;!    Strings     0
   348                           ;!    Constant    0
   349                           ;!    Data        0
   350                           ;!    BSS         1
   351                           ;!    Persistent  0
   352                           ;!    Stack       0
   353                           ;!
   354                           ;!Auto Spaces:
   355                           ;!    Space          Size  Autos    Used
   356                           ;!    COMMON           14      7       8
   357                           ;!    BANK0            80      0       0
   358                           ;!    BANK1            80      0       0
   359                           ;!    BANK2            48      0       0
   360                           
   361                           ;!
   362                           ;!Pointer List with Targets:
   363                           ;!
   364                           ;!    None.
   365                           
   366                           
   367                           ;!
   368                           ;!Critical Paths under _main in COMMON
   369                           ;!
   370                           ;!    _main->_UART_Write
   371                           ;!
   372                           ;!Critical Paths under _ISR in COMMON
   373                           ;!
   374                           ;!    None.
   375                           ;!
   376                           ;!Critical Paths under _main in BANK0
   377                           ;!
   378                           ;!    None.
   379                           ;!
   380                           ;!Critical Paths under _ISR in BANK0
   381                           ;!
   382                           ;!    None.
   383                           ;!
   384                           ;!Critical Paths under _main in BANK1
   385                           ;!
   386                           ;!    None.
   387                           ;!
   388                           ;!Critical Paths under _ISR in BANK1
   389                           ;!
   390                           ;!    None.
   391                           ;!
   392                           ;!Critical Paths under _main in BANK2
   393                           ;!
   394                           ;!    None.
   395                           ;!
   396                           ;!Critical Paths under _ISR in BANK2
   397                           ;!
   398                           ;!    None.
   399                           
   400 ;;
   401 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   402 ;;
   403                           
   404                           ;!
   405                           ;!Call Graph Tables:
   406                           ;!
   407                           ;! ---------------------------------------------------------------------------------
   408                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   409                           ;! ---------------------------------------------------------------------------------
   410                           ;! (0) _main                                                 3     3      0      15
   411                           ;!                                              4 COMMON     3     3      0
   412                           ;!                         _TX_RX_Init
   413                           ;!                         _UART_Write
   414                           ;! ---------------------------------------------------------------------------------
   415                           ;! (1) _UART_Write                                           1     1      0      15
   416                           ;!                                              3 COMMON     1     1      0
   417                           ;! ---------------------------------------------------------------------------------
   418                           ;! (1) _TX_RX_Init                                           0     0      0       0
   419                           ;! ---------------------------------------------------------------------------------
   420                           ;! Estimated maximum stack depth 1
   421                           ;! ---------------------------------------------------------------------------------
   422                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   423                           ;! ---------------------------------------------------------------------------------
   424                           ;! (2) _ISR                                                  3     3      0       0
   425                           ;!                                              0 COMMON     3     3      0
   426                           ;! ---------------------------------------------------------------------------------
   427                           ;! Estimated maximum stack depth 2
   428                           ;! ---------------------------------------------------------------------------------
   429                           ;!
   430                           ;! Call Graph Graphs:
   431                           ;!
   432                           ;! _main (ROOT)
   433                           ;!   _TX_RX_Init
   434                           ;!   _UART_Write
   435                           ;!
   436                           ;! _ISR (ROOT)
   437                           ;!
   438                           
   439                           ;! Address spaces:
   440                           
   441                           ;!Name               Size   Autos  Total    Cost      Usage
   442                           ;!BITCOMMON            E      0       0       0        0.0%
   443                           ;!EEDATA              80      0       0       0        0.0%
   444                           ;!NULL                 0      0       0       0        0.0%
   445                           ;!CODE                 0      0       0       0        0.0%
   446                           ;!COMMON               E      7       8       1       57.1%
   447                           ;!BITSFR0              0      0       0       1        0.0%
   448                           ;!SFR0                 0      0       0       1        0.0%
   449                           ;!BITSFR1              0      0       0       2        0.0%
   450                           ;!SFR1                 0      0       0       2        0.0%
   451                           ;!STACK                0      0       0       2        0.0%
   452                           ;!BANK0               50      0       0       3        0.0%
   453                           ;!BITSFR3              0      0       0       4        0.0%
   454                           ;!SFR3                 0      0       0       4        0.0%
   455                           ;!ABS                  0      0       8       4        0.0%
   456                           ;!BITBANK0            50      0       0       5        0.0%
   457                           ;!BITSFR2              0      0       0       5        0.0%
   458                           ;!SFR2                 0      0       0       5        0.0%
   459                           ;!BITBANK1            50      0       0       6        0.0%
   460                           ;!BANK1               50      0       0       7        0.0%
   461                           ;!BITBANK2            30      0       0       8        0.0%
   462                           ;!BANK2               30      0       0       9        0.0%
   463                           ;!DATA                 0      0       8      10        0.0%
   464                           
   465                           	global	_main
   466                           
   467 ;; *************** function _main *****************
   468 ;; Defined at:
   469 ;;		line 21 in file "main.c"
   470 ;; Parameters:    Size  Location     Type
   471 ;;		None
   472 ;; Auto vars:     Size  Location     Type
   473 ;;		None
   474 ;; Return value:  Size  Location     Type
   475 ;;                  1    wreg      void 
   476 ;; Registers used:
   477 ;;		wreg, status,2, status,0, pclath, cstack
   478 ;; Tracked objects:
   479 ;;		On entry : B00/0
   480 ;;		On exit  : 0/0
   481 ;;		Unchanged: 0/0
   482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   483 ;;      Params:         0       0       0       0
   484 ;;      Locals:         0       0       0       0
   485 ;;      Temps:          3       0       0       0
   486 ;;      Totals:         3       0       0       0
   487 ;;Total ram usage:        3 bytes
   488 ;; Hardware stack levels required when called:    2
   489 ;; This function calls:
   490 ;;		_TX_RX_Init
   491 ;;		_UART_Write
   492 ;; This function is called by:
   493 ;;		Startup code after reset
   494 ;; This function uses a non-reentrant model
   495 ;;
   496                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   497                           	file	"main.c"
   498                           	line	21
   499                           global __pmaintext
   500                           __pmaintext:	;psect for function _main
   501  000E                     psect	maintext
   502                           	file	"main.c"
   503                           	line	21
   504                           	global	__size_of_main
   505                           	__size_of_main	equ	__end_of_main-_main
   506  0058                     	
   507                           _main:	
   508  000E                     ;incstack = 0
   509                           	opt	stack 6
   510                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   511                           	line	22
   512                           	
   513                           l675:	
   514  000E                     ;main.c: 22:     TX_RX_Init();
   515                           	fcall	_TX_RX_Init
   516  000E  2066               	line	23
   517                           	
   518                           l677:	
   519  000F                     ;main.c: 23:     TRISA&=0b00000000;
   520                           	bsf	status, 5	;RP0=1, select bank1
   521  000F  1683               	bcf	status, 6	;RP1=0, select bank1
   522  0010  1303               	clrf	(133)^080h	;volatile
   523  0011  0185               	line	24
   524                           	
   525                           l679:	
   526  0012                     ;main.c: 24:     PORTA=0x00;
   527                           	bcf	status, 5	;RP0=0, select bank0
   528  0012  1283               	bcf	status, 6	;RP1=0, select bank0
   529  0013  1303               	clrf	(5)	;volatile
   530  0014  0185               	line	25
   531                           	
   532                           l681:	
   533  0015                     ;main.c: 25:     TRISB|=0b00011001;
   534                           	movlw	low(019h)
   535  0015  3019               	movwf	(??_main+0)+0
   536  0016  00F4               	movf	(??_main+0)+0,w
   537  0017  0874               	bsf	status, 5	;RP0=1, select bank1
   538  0018  1683               	bcf	status, 6	;RP1=0, select bank1
   539  0019  1303               	iorwf	(134)^080h,f	;volatile
   540  001A  0486               	goto	l683
   541  001B  281C               	line	26
   542                           ;main.c: 26:     while(1){
   543                           	
   544                           l55:	
   545  001C                     	line	27
   546                           	
   547                           l683:	
   548  001C                     ;main.c: 27:         if(RB0){
   549                           	bcf	status, 5	;RP0=0, select bank0
   550  001C  1283               	btfss	(48/8),(48)&7	;volatile
   551  001D  1C06               	goto	u21
   552  001E  2820               	goto	u20
   553  001F  2821               u21:
   554  0020                     	goto	l689
   555  0020  2833               u20:
   556  0021                     	line	28
   557                           	
   558                           l685:	
   559  0021                     ;main.c: 28:             Data++;
   560                           	movlw	low(01h)
   561  0021  3001               	movwf	(??_main+0)+0
   562  0022  00F4               	movf	(??_main+0)+0,w
   563  0023  0874               	addwf	(_Data),f
   564  0024  07F7               	line	29
   565                           	
   566                           l687:	
   567  0025                     ;main.c: 29:             _delay((unsigned long)((250)*(4000000/4000.0)));
   568                           	opt asmopt_push
   569                           opt asmopt_off
   570                           movlw  2
   571  0025  3002               movwf	((??_main+0)+0+2),f
   572  0026  00F6               movlw	69
   573  0027  3045               movwf	((??_main+0)+0+1),f
   574  0028  00F5               	movlw	169
   575  0029  30A9               movwf	((??_main+0)+0),f
   576  002A  00F4               	u67:
   577  002B                     decfsz	((??_main+0)+0),f
   578  002B  0BF4               	goto	u67
   579  002C  282B               	decfsz	((??_main+0)+0+1),f
   580  002D  0BF5               	goto	u67
   581  002E  282B               	decfsz	((??_main+0)+0+2),f
   582  002F  0BF6               	goto	u67
   583  0030  282B               	nop2
   584  0031  2832               opt asmopt_pop
   585                           
   586                           	goto	l689
   587  0032  2833               	line	30
   588                           ;main.c: 30:         }
   589                           	
   590                           l56:	
   591  0033                     	line	31
   592                           	
   593                           l689:	
   594  0033                     ;main.c: 31:         if(RB3){
   595                           	bcf	status, 5	;RP0=0, select bank0
   596  0033  1283               	bcf	status, 6	;RP1=0, select bank0
   597  0034  1303               	btfss	(51/8),(51)&7	;volatile
   598  0035  1D86               	goto	u31
   599  0036  2838               	goto	u30
   600  0037  2839               u31:
   601  0038                     	goto	l695
   602  0038  2849               u30:
   603  0039                     	line	32
   604                           	
   605                           l691:	
   606  0039                     ;main.c: 32:             Data--;
   607                           	movlw	01h
   608  0039  3001               	subwf	(_Data),f
   609  003A  02F7               	line	33
   610                           	
   611                           l693:	
   612  003B                     ;main.c: 33:             _delay((unsigned long)((250)*(4000000/4000.0)));
   613                           	opt asmopt_push
   614                           opt asmopt_off
   615                           movlw  2
   616  003B  3002               movwf	((??_main+0)+0+2),f
   617  003C  00F6               movlw	69
   618  003D  3045               movwf	((??_main+0)+0+1),f
   619  003E  00F5               	movlw	169
   620  003F  30A9               movwf	((??_main+0)+0),f
   621  0040  00F4               	u77:
   622  0041                     decfsz	((??_main+0)+0),f
   623  0041  0BF4               	goto	u77
   624  0042  2841               	decfsz	((??_main+0)+0+1),f
   625  0043  0BF5               	goto	u77
   626  0044  2841               	decfsz	((??_main+0)+0+2),f
   627  0045  0BF6               	goto	u77
   628  0046  2841               	nop2
   629  0047  2848               opt asmopt_pop
   630                           
   631                           	goto	l695
   632  0048  2849               	line	34
   633                           ;main.c: 34:         }
   634                           	
   635                           l57:	
   636  0049                     	line	38
   637                           	
   638                           l695:	
   639  0049                     ;main.c: 38:         if(RB4){
   640                           	bcf	status, 5	;RP0=0, select bank0
   641  0049  1283               	bcf	status, 6	;RP1=0, select bank0
   642  004A  1303               	btfss	(52/8),(52)&7	;volatile
   643  004B  1E06               	goto	u41
   644  004C  284E               	goto	u40
   645  004D  284F               u41:
   646  004E                     	goto	l701
   647  004E  285F               u40:
   648  004F                     	line	39
   649                           	
   650                           l697:	
   651  004F                     ;main.c: 39:             UART_Write(Data);
   652                           	movf	(_Data),w
   653  004F  0877               	fcall	_UART_Write
   654  0050  208E               	line	40
   655                           	
   656                           l699:	
   657  0051                     ;main.c: 40:             _delay((unsigned long)((250)*(4000000/4000.0)));
   658                           	opt asmopt_push
   659                           opt asmopt_off
   660                           movlw  2
   661  0051  3002               movwf	((??_main+0)+0+2),f
   662  0052  00F6               movlw	69
   663  0053  3045               movwf	((??_main+0)+0+1),f
   664  0054  00F5               	movlw	169
   665  0055  30A9               movwf	((??_main+0)+0),f
   666  0056  00F4               	u87:
   667  0057                     decfsz	((??_main+0)+0),f
   668  0057  0BF4               	goto	u87
   669  0058  2857               	decfsz	((??_main+0)+0+1),f
   670  0059  0BF5               	goto	u87
   671  005A  2857               	decfsz	((??_main+0)+0+2),f
   672  005B  0BF6               	goto	u87
   673  005C  2857               	nop2
   674  005D  285E               opt asmopt_pop
   675                           
   676                           	goto	l701
   677  005E  285F               	line	41
   678                           ;main.c: 41:         }
   679                           	
   680                           l58:	
   681  005F                     	line	42
   682                           	
   683                           l701:	
   684  005F                     ;main.c: 42:         PORTA = Data;
   685                           	movf	(_Data),w
   686  005F  0877               	bcf	status, 5	;RP0=0, select bank0
   687  0060  1283               	bcf	status, 6	;RP1=0, select bank0
   688  0061  1303               	movwf	(5)	;volatile
   689  0062  0085               	goto	l683
   690  0063  281C               	line	43
   691                           ;main.c: 43:     }
   692                           	
   693                           l59:	
   694  0064                     	goto	l683
   695  0064  281C               	
   696                           l60:	
   697  0065                     	line	45
   698                           ;main.c: 44:     return;
   699                           	
   700                           l61:	
   701  0065                     	global	start
   702                           	ljmp	start
   703  0065  280A               	opt stack 0
   704                           GLOBAL	__end_of_main
   705                           	__end_of_main:
   706  0066                     	signat	_main,89
   707                           	global	_UART_Write
   708                           
   709 ;; *************** function _UART_Write *****************
   710 ;; Defined at:
   711 ;;		line 69 in file "main.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;  data            1    wreg     unsigned char 
   714 ;; Auto vars:     Size  Location     Type
   715 ;;  data            1    3[COMMON] unsigned char 
   716 ;; Return value:  Size  Location     Type
   717 ;;                  1    wreg      void 
   718 ;; Registers used:
   719 ;;		wreg
   720 ;; Tracked objects:
   721 ;;		On entry : 0/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   725 ;;      Params:         0       0       0       0
   726 ;;      Locals:         1       0       0       0
   727 ;;      Temps:          0       0       0       0
   728 ;;      Totals:         1       0       0       0
   729 ;;Total ram usage:        1 bytes
   730 ;; Hardware stack levels used:    1
   731 ;; Hardware stack levels required when called:    1
   732 ;; This function calls:
   733 ;;		Nothing
   734 ;; This function is called by:
   735 ;;		_main
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
   739                           	line	69
   740                           global __ptext1
   741                           __ptext1:	;psect for function _UART_Write
   742  008E                     psect	text1
   743                           	file	"main.c"
   744                           	line	69
   745                           	global	__size_of_UART_Write
   746                           	__size_of_UART_Write	equ	__end_of_UART_Write-_UART_Write
   747  000E                     	
   748                           _UART_Write:	
   749  008E                     ;incstack = 0
   750                           	opt	stack 6
   751                           ; Regs used in _UART_Write: [wreg]
   752                           ;UART_Write@data stored from wreg
   753                           	movwf	(UART_Write@data)
   754  008E  00F3               	line	70
   755                           	
   756                           l671:	
   757  008F                     ;main.c: 70:     while(!TRMT);
   758                           	goto	l73
   759  008F  2890               	
   760                           l74:	
   761  0090                     	
   762                           l73:	
   763  0090                     	bsf	status, 5	;RP0=1, select bank1
   764  0090  1683               	bcf	status, 6	;RP1=0, select bank1
   765  0091  1303               	btfss	(1217/8)^080h,(1217)&7	;volatile
   766  0092  1C98               	goto	u11
   767  0093  2895               	goto	u10
   768  0094  2896               u11:
   769  0095                     	goto	l73
   770  0095  2890               u10:
   771  0096                     	goto	l673
   772  0096  2897               	
   773                           l75:	
   774  0097                     	line	71
   775                           	
   776                           l673:	
   777  0097                     ;main.c: 71:     TXREG = data;
   778                           	movf	(UART_Write@data),w
   779  0097  0873               	bcf	status, 5	;RP0=0, select bank0
   780  0098  1283               	bcf	status, 6	;RP1=0, select bank0
   781  0099  1303               	movwf	(25)	;volatile
   782  009A  0099               	line	72
   783                           	
   784                           l76:	
   785  009B                     	return
   786  009B  0008               	opt stack 0
   787                           GLOBAL	__end_of_UART_Write
   788                           	__end_of_UART_Write:
   789  009C                     	signat	_UART_Write,4217
   790                           	global	_TX_RX_Init
   791                           
   792 ;; *************** function _TX_RX_Init *****************
   793 ;; Defined at:
   794 ;;		line 55 in file "main.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;		None
   797 ;; Auto vars:     Size  Location     Type
   798 ;;		None
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   808 ;;      Params:         0       0       0       0
   809 ;;      Locals:         0       0       0       0
   810 ;;      Temps:          0       0       0       0
   811 ;;      Totals:         0       0       0       0
   812 ;;Total ram usage:        0 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    1
   815 ;; This function calls:
   816 ;;		Nothing
   817 ;; This function is called by:
   818 ;;		_main
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           psect	text2,local,class=CODE,delta=2,merge=1,group=0
   822                           	line	55
   823                           global __ptext2
   824                           __ptext2:	;psect for function _TX_RX_Init
   825  0066                     psect	text2
   826                           	file	"main.c"
   827                           	line	55
   828                           	global	__size_of_TX_RX_Init
   829                           	__size_of_TX_RX_Init	equ	__end_of_TX_RX_Init-_TX_RX_Init
   830  0015                     	
   831                           _TX_RX_Init:	
   832  0066                     ;incstack = 0
   833                           	opt	stack 6
   834                           ; Regs used in _TX_RX_Init: [wreg]
   835                           	line	56
   836                           	
   837                           l649:	
   838  0066                     ;main.c: 56:     BRGH = 1;
   839                           	bsf	status, 5	;RP0=1, select bank1
   840  0066  1683               	bcf	status, 6	;RP1=0, select bank1
   841  0067  1303               	bsf	(1218/8)^080h,(1218)&7	;volatile
   842  0068  1518               	line	57
   843                           	
   844                           l651:	
   845  0069                     ;main.c: 57:     SPBRG = 25;
   846                           	movlw	low(019h)
   847  0069  3019               	movwf	(153)^080h	;volatile
   848  006A  0099               	line	58
   849                           	
   850                           l653:	
   851  006B                     ;main.c: 58:     SYNC = 0;
   852                           	bcf	(1220/8)^080h,(1220)&7	;volatile
   853  006B  1218               	line	59
   854                           	
   855                           l655:	
   856  006C                     ;main.c: 59:     SPEN = 1;
   857                           	bcf	status, 5	;RP0=0, select bank0
   858  006C  1283               	bcf	status, 6	;RP1=0, select bank0
   859  006D  1303               	bsf	(199/8),(199)&7	;volatile
   860  006E  1798               	line	60
   861                           	
   862                           l657:	
   863  006F                     ;main.c: 60:     TRISB1=1;
   864                           	bsf	status, 5	;RP0=1, select bank1
   865  006F  1683               	bcf	status, 6	;RP1=0, select bank1
   866  0070  1303               	bsf	(1073/8)^080h,(1073)&7	;volatile
   867  0071  1486               	line	61
   868                           	
   869                           l659:	
   870  0072                     ;main.c: 61:     TRISB2=1;
   871                           	bsf	(1074/8)^080h,(1074)&7	;volatile
   872  0072  1506               	line	62
   873                           	
   874                           l661:	
   875  0073                     ;main.c: 62:     TXEN=1;
   876                           	bsf	(1221/8)^080h,(1221)&7	;volatile
   877  0073  1698               	line	63
   878                           	
   879                           l663:	
   880  0074                     ;main.c: 63:     RCIE=1;
   881                           	bsf	(1125/8)^080h,(1125)&7	;volatile
   882  0074  168C               	line	64
   883                           	
   884                           l665:	
   885  0075                     ;main.c: 64:     PEIE=1;
   886                           	bsf	(94/8),(94)&7	;volatile
   887  0075  170B               	line	65
   888                           	
   889                           l667:	
   890  0076                     ;main.c: 65:     GIE=1;
   891                           	bsf	(95/8),(95)&7	;volatile
   892  0076  178B               	line	66
   893                           	
   894                           l669:	
   895  0077                     ;main.c: 66:     CREN=1;
   896                           	bcf	status, 5	;RP0=0, select bank0
   897  0077  1283               	bcf	status, 6	;RP1=0, select bank0
   898  0078  1303               	bsf	(196/8),(196)&7	;volatile
   899  0079  1618               	line	67
   900                           	
   901                           l70:	
   902  007A                     	return
   903  007A  0008               	opt stack 0
   904                           GLOBAL	__end_of_TX_RX_Init
   905                           	__end_of_TX_RX_Init:
   906  007B                     	signat	_TX_RX_Init,89
   907                           	global	_ISR
   908                           
   909 ;; *************** function _ISR *****************
   910 ;; Defined at:
   911 ;;		line 47 in file "main.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;		None
   914 ;; Auto vars:     Size  Location     Type
   915 ;;		None
   916 ;; Return value:  Size  Location     Type
   917 ;;                  1    wreg      void 
   918 ;; Registers used:
   919 ;;		wreg
   920 ;; Tracked objects:
   921 ;;		On entry : 0/0
   922 ;;		On exit  : 0/0
   923 ;;		Unchanged: 0/0
   924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   925 ;;      Params:         0       0       0       0
   926 ;;      Locals:         0       0       0       0
   927 ;;      Temps:          3       0       0       0
   928 ;;      Totals:         3       0       0       0
   929 ;;Total ram usage:        3 bytes
   930 ;; Hardware stack levels used:    1
   931 ;; This function calls:
   932 ;;		Nothing
   933 ;; This function is called by:
   934 ;;		Interrupt level 1
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           psect	text3,local,class=CODE,delta=2,merge=1,group=0
   938                           	line	47
   939                           global __ptext3
   940                           __ptext3:	;psect for function _ISR
   941  007B                     psect	text3
   942                           	file	"main.c"
   943                           	line	47
   944                           	global	__size_of_ISR
   945                           	__size_of_ISR	equ	__end_of_ISR-_ISR
   946  0013                     	
   947                           _ISR:	
   948  007B                     ;incstack = 0
   949                           	opt	stack 6
   950                           ; Regs used in _ISR: [wreg]
   951                           psect	intentry,class=CODE,delta=2
   952                           global __pintentry
   953                           __pintentry:
   954  0004                     global interrupt_function
   955                           interrupt_function:
   956  0004                     	global saved_w
   957                           	saved_w	set	btemp+0
   958  007E                     	movwf	saved_w
   959  0004  00FE               	swapf	status,w
   960  0005  0E03               	movwf	(??_ISR+1)
   961  0006  00F1               	movf	pclath,w
   962  0007  080A               	movwf	(??_ISR+2)
   963  0008  00F2               	ljmp	_ISR
   964  0009  287B               psect	text3
   965                           	line	48
   966                           	
   967                           i1l703:	
   968  007B                     ;main.c: 48:     if (RCIF){
   969                           	bcf	status, 5	;RP0=0, select bank0
   970  007B  1283               	bcf	status, 6	;RP1=0, select bank0
   971  007C  1303               	btfss	(101/8),(101)&7	;volatile
   972  007D  1E8C               	goto	u5_21
   973  007E  2880               	goto	u5_20
   974  007F  2881               u5_21:
   975  0080                     	goto	i1l67
   976  0080  2887               u5_20:
   977  0081                     	line	49
   978                           	
   979                           i1l705:	
   980  0081                     ;main.c: 49:         Data=RCREG;
   981                           	movf	(26),w	;volatile
   982  0081  081A               	movwf	(??_ISR+0)+0
   983  0082  00F0               	movf	(??_ISR+0)+0,w
   984  0083  0870               	movwf	(_Data)
   985  0084  00F7               	line	50
   986                           	
   987                           i1l707:	
   988  0085                     ;main.c: 50:         RCIF = 0;
   989                           	bcf	(101/8),(101)&7	;volatile
   990  0085  128C               	goto	i1l67
   991  0086  2887               	line	51
   992                           ;main.c: 51:     }
   993                           	
   994                           i1l66:	
   995  0087                     	line	52
   996                           	
   997                           i1l67:	
   998  0087                     	movf	(??_ISR+2),w
   999  0087  0872               	movwf	pclath
  1000  0088  008A               	swapf	(??_ISR+1)^0FFFFFF80h,w
  1001  0089  0E71               	movwf	status
  1002  008A  0083               	swapf	saved_w,f
  1003  008B  0EFE               	swapf	saved_w,w
  1004  008C  0E7E               	retfie
  1005  008D  0009               	opt stack 0
  1006                           GLOBAL	__end_of_ISR
  1007                           	__end_of_ISR:
  1008  008E                     	signat	_ISR,89
  1009                           global	___latbits
  1010                           ___latbits	equ	0
  1011  0000                     	global	btemp
  1012                           	btemp set 07Eh
  1013  007E                     
  1014                           	DABS	1,126,2	;btemp
  1015                           	global	wtemp0
  1016                           	wtemp0 set btemp+0
  1017  007E                     	end


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_UART_Write

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0      15
                                              4 COMMON     3     3      0
                         _TX_RX_Init
                         _UART_Write
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      15
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TX_RX_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TX_RX_Init
   _UART_Write

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       8       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       8      10        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Apr 25 05:58:31 2023

            __CFG_CP$OFF 0000                       l60 0065                       l61 0065  
                     l70 007A                       l55 001C                       l56 0033  
                     l73 0090                       l57 0049                       l74 0090  
                     l58 005F                       l75 0097                       l59 0064  
                     l76 009B                       u10 0096                       u11 0095  
                     u20 0021                       u21 0020                       u30 0039  
                     u31 0038                       u40 004F                       u41 004E  
                     u67 002B                       u77 0041                       u87 0057  
                    l701 005F                      l651 0069                      l661 0073  
                    l653 006B                      l663 0074                      l655 006C  
                    l671 008F                      l665 0075                      l657 006F  
                    l649 0066                      l673 0097                      l681 0015  
                    l667 0076                      l659 0072                      l691 0039  
                    l683 001C                      l675 000E                      l669 0077  
                    l693 003B                      l685 0021                      l677 000F  
                    l695 0049                      l687 0025                      l679 0012  
                    l697 004F                      l689 0033                      l699 0051  
                    _GIE 005F                      _RB0 0030                      _RB3 0033  
                    _RB4 0034             __CFG_CPD$OFF 0000                      _ISR 007B  
           __CFG_LVP$OFF 0000                     ?_ISR 0070                     _BRGH 04C2  
                   _CREN 00C4                     _PEIE 005E                     _RCIE 0465  
                   _RCIF 0065                     i1l66 0087                     i1l67 0087  
                   _SPEN 00C7                     _TRMT 04C1                     _TXEN 04C5  
                   _SYNC 04C4                     _Data 0077                     u5_20 0081  
                   u5_21 0080                     _main 000E                     btemp 007E  
                   start 000A                    ??_ISR 0070               _TX_RX_Init 0066  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    i1l703 007B  
                  i1l705 0081                    i1l707 0085                    _RCREG 001A  
                  _SPBRG 0099                    _PORTA 0005                    _TRISA 0085  
                  _TRISB 0086                    _TXREG 0019              ?_UART_Write 0070  
         __CFG_BOREN$OFF 0000                    pclath 000A                    status 0003  
                  wtemp0 007E           __CFG_MCLRE$OFF 0000          __initialization 000B  
           __end_of_main 0066                   ??_main 0074                   _TRISB1 0431  
                 _TRISB2 0432           __CFG_PWRTE$OFF 0000      __size_of_UART_Write 000E  
            ?_TX_RX_Init 0070                   saved_w 007E  __end_of__initialization 000C  
         __pcstackCOMMON 0070      __size_of_TX_RX_Init 0015               __pmaintext 000E  
             __pintentry 0004             ??_UART_Write 0073       __end_of_UART_Write 009C  
                __ptext1 008E                  __ptext2 0066                  __ptext3 007B  
           __size_of_ISR 0013     end_of_initialization 000C             ??_TX_RX_Init 0073  
         UART_Write@data 0073       __end_of_TX_RX_Init 007B      start_initialization 000B  
            __end_of_ISR 008E              __pbssCOMMON 0077                ___latbits 0000  
      interrupt_function 0004            __size_of_main 0058                 intlevel1 0000  
             _UART_Write 008E       __CFG_FOSC$INTOSCIO 0000  
